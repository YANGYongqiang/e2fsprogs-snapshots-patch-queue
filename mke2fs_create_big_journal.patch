mke2fs: Create a big journal for COW operations

From: Amir Goldstein <amir73il@users.sf.net>

COW transactions reserve up to 24 times more credits than traditional
transactions for the same operation.  On mke2fs and tune2fs, if the
'-J big' option is used to create a journal, increase the default
journal size by a factor of 24.

Signed-off-by: Amir Goldstein <amir73il@users.sf.net>

diff --git a/lib/ext2fs/ext2_fs.h b/lib/ext2fs/ext2_fs.h
index d360915..dca2fc3 100644
--- a/lib/ext2fs/ext2_fs.h
+++ b/lib/ext2fs/ext2_fs.h
@@ -676,6 +676,19 @@ struct ext2_super_block {
 #define EXT3_JNL_BACKUP_BLOCKS	1
 
 /*
+ * A 'big' journal needs to accomodate extra snapshot COW credits.
+ * Default 'big' journal size accomodates maximum possible COW credits.
+ * Minimum required 'big' journal size accomodates the avarage COW credits.
+ */
+#define EXT4_DEF_JOURNAL_BLOCKS		32768
+#define EXT4_AVG_COW_CREDITS		16
+#define EXT4_MAX_COW_CREDITS		24
+#define EXT4_MIN_BIG_JOURNAL_BLOCKS	(EXT4_DEF_JOURNAL_BLOCKS* \
+					 EXT4_AVG_COW_CREDITS)
+#define EXT4_DEF_BIG_JOURNAL_BLOCKS	(EXT4_DEF_JOURNAL_BLOCKS* \
+					 EXT4_MAX_COW_CREDITS)
+
+/*
  * Feature set definitions
  */
 
diff --git a/lib/ext2fs/ext2fs.h b/lib/ext2fs/ext2fs.h
index 45dd811..cbb7b9c 100644
--- a/lib/ext2fs/ext2fs.h
+++ b/lib/ext2fs/ext2fs.h
@@ -1304,6 +1304,8 @@ extern errcode_t ext2fs_add_journal_device(ext2_filsys fs,
 extern errcode_t ext2fs_add_journal_inode(ext2_filsys fs, blk_t num_blocks,
 					  int flags);
 extern int ext2fs_default_journal_size(__u64 num_blocks);
+extern int ext2fs_big_journal_size(int factor, __u64 blocks);
+extern int ext2fs_check_journal_size(ext2_filsys fs);
 
 /* openfs.c */
 extern errcode_t ext2fs_open(const char *name, int flags, int superblock,
diff --git a/lib/ext2fs/mkjournal.c b/lib/ext2fs/mkjournal.c
index 838d751..63b7d4c 100644
--- a/lib/ext2fs/mkjournal.c
+++ b/lib/ext2fs/mkjournal.c
@@ -425,6 +425,47 @@ int ext2fs_default_journal_size(__u64 num_blocks)
 }
 
 /*
+ * Big journal is up to X times bigger than the default journal
+ * to accomodate snapshot COW credits in transactions.
+ * journal size is restricted to 1/32 of the filesystem size
+ */
+int ext2fs_big_journal_size(int factor, __u64 blocks)
+{
+	int mega_blocks = blocks >> 20;
+	if (!mega_blocks)
+		return ext2fs_default_journal_size(blocks);
+
+	if (mega_blocks < factor)
+		/* 32K/1M = 1/32 of filesystem size */
+		return EXT4_DEF_JOURNAL_BLOCKS*mega_blocks;
+
+	/* X times bigger than the default journal */
+	return EXT4_DEF_JOURNAL_BLOCKS*factor;
+}
+
+/*
+ * Return the number of blocks in the journal inode
+ */
+int ext2fs_check_journal_size(ext2_filsys fs)
+{
+	struct ext2_inode j_inode;
+	int j_blocks;
+
+	if (!(fs->super->s_feature_compat &
+		EXT3_FEATURE_COMPAT_HAS_JOURNAL) ||
+		!fs->super->s_journal_inum)
+		return 0;
+
+	if (ext2fs_read_inode(fs, fs->super->s_journal_inum, &j_inode))
+		return -1;
+
+	/* read journal inode size */
+	j_blocks = j_inode.i_size >> EXT2_BLOCK_SIZE_BITS(fs->super);
+
+	return j_blocks;
+}
+
+/*
  * This function adds a journal device to a filesystem
  */
 errcode_t ext2fs_add_journal_device(ext2_filsys fs, ext2_filsys journal_dev)
diff --git a/misc/mke2fs.c b/misc/mke2fs.c
index 7d371bb..ee4647b 100644
--- a/misc/mke2fs.c
+++ b/misc/mke2fs.c
@@ -1470,10 +1470,14 @@ profile_error:
 			show_version_only++;
 			break;
 		case 'x':
+			/* Prepare for snapshots: */
+			/* 1. create a big journal */
+			journal_size = -EXT4_MAX_COW_CREDITS;
+			/* 2. use system page size as block size */
 			blocksize = sys_page_size;
 			fs_param.s_log_block_size =
 				int_log2(blocksize >> EXT2_MIN_BLOCK_LOG_SIZE);
-			/* create exclude bitmap */
+			/* 3. create exclude bitmap */
 			edit_feature("exclude_bitmap", &fs_param.s_feature_compat);
 			break;
 		default:
diff --git a/misc/util.c b/misc/util.c
index 4564b4e..6364e77 100644
--- a/misc/util.c
+++ b/misc/util.c
@@ -217,6 +217,20 @@ void parse_journal_opts(const char *opts)
 			journal_size = strtoul(arg, &p, 0);
 			if (*p)
 				journal_usage++;
+		} else if (strcmp(token, "big") == 0) {
+			/* Create a big journal for snapshots */
+			journal_size = -EXT4_MAX_COW_CREDITS;
+			continue;
+		} else if (strcmp(token, "bigger") == 0) {
+			/* Create a journal bigger than default */
+			if (!arg) {
+				journal_usage++;
+				continue;
+			}
+			journal_size = -strtoul(arg, &p, 0);
+			if (*p)
+				journal_usage++;
+			continue;
 		} else if (strcmp(token, "v1_superblock") == 0) {
 			journal_flags |= EXT2_MKJOURNAL_V1_SUPER;
 			continue;
@@ -230,6 +244,8 @@ void parse_journal_opts(const char *opts)
 			"\tis set off by an equals ('=') sign.\n\n"
 			"Valid journal options are:\n"
 			"\tsize=<journal size in megabytes>\n"
+			"\tbig (big journal for snapshots)\n"
+			"\tbigger=<X times bigger than default size>\n"
 			"\tdevice=<journal device>\n\n"
 			"The journal size must be between "
 			"1024 and 10240000 filesystem blocks.\n\n"), stderr);
@@ -258,6 +274,20 @@ unsigned int figure_journal_size(int size, ext2_filsys fs)
 		return 0;
 	}
 
+	if (size < -1) {
+		/* bigger journal requested */
+		j_blocks = ext2fs_big_journal_size(-size, fs->super->s_blocks_count);
+		if (j_blocks < EXT4_DEF_JOURNAL_BLOCKS*(-size)) {
+			fputs(_("\nFilesystem too small for requested "
+					"journal size.  "), stderr);
+			if (j_blocks < 0) {
+				fputs(_("Aborting.\n"), stderr);
+				exit(1);
+			}
+			fputs(_("Creating a smaller journal.\n"), stderr);
+		}
+	}
+
 	if (size > 0) {
 		j_blocks = size * 1024 / (fs->blocksize	/ 1024);
 		if (j_blocks < 1024 || j_blocks > 10240000) {
