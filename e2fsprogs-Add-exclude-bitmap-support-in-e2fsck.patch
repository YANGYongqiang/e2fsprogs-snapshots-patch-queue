e2fsprogs: Add exclude bitmap support in e2fsck.

From: Yongqiang Yang <xiaoqiangnk@gmail.com>

Exclude bitmap is a compat feature needed by exy4 snapshot.  This
patch add exclude bitmap support in e2fsck.

Signed-off-by: Yongqiang Yang <xiaoqiangnk@gmail.com>
diff --git a/e2fsck/e2fsck.h b/e2fsck/e2fsck.h
index 1a55825..1679ebe 100644
--- a/e2fsck/e2fsck.h
+++ b/e2fsck/e2fsck.h
@@ -256,6 +256,7 @@ struct e2fsck_struct {
 	 */
 	int *invalid_inode_bitmap_flag;
 	int *invalid_block_bitmap_flag;
+	int *invalid_exclude_bitmap_flag;
 	int *invalid_inode_table_flag;
 	int invalid_bitmaps;	/* There are invalid bitmaps/itable */
 
diff --git a/e2fsck/pass1.c b/e2fsck/pass1.c
index 8d84ca4..dc24d72 100644
--- a/e2fsck/pass1.c
+++ b/e2fsck/pass1.c
@@ -2415,6 +2415,15 @@ static int process_bad_block(ext2_filsys fs,
 			}
 			return 0;
 		}
+		if (EXT2_HAS_COMPAT_FEATURE(fs->super,
+			EXT2_FEATURE_COMPAT_EXCLUDE_BITMAP) &&
+		    blk == ext2fs_exclude_bitmap_loc(fs, i)) {
+			if (fix_problem(ctx, PR_1_BB_BAD_BLOCK, pctx)) {
+				ctx->invalid_exclude_bitmap_flag[i]++;
+				ctx->invalid_bitmaps++;
+			}
+			return 0;
+		}
 		if (blk == ext2fs_inode_bitmap_loc(fs, i)) {
 			if (fix_problem(ctx, PR_1_IB_BAD_BLOCK, pctx)) {
 				ctx->invalid_inode_bitmap_flag[i]++;
@@ -2566,6 +2575,13 @@ static void handle_fs_bad_blocks(e2fsck_t ctx)
 					1, &new_blk);
 			ext2fs_block_bitmap_loc_set(fs, i, new_blk);
 		}
+		if (EXT2_HAS_COMPAT_FEATURE(fs->super,
+			EXT2_FEATURE_COMPAT_EXCLUDE_BITMAP) &&
+		    ctx->invalid_exclude_bitmap_flag[i]) {
+			new_table_block(ctx, first_block, i,
+					_("exclude bitmap"), 1, &new_blk);
+			ext2fs_exclude_bitmap_loc_set(fs, i, new_blk);
+		}
 		if (ctx->invalid_inode_bitmap_flag[i]) {
 			new_blk = ext2fs_inode_bitmap_loc(fs, i);
 			new_table_block(ctx, first_block, i, _("inode bitmap"),
@@ -2644,6 +2660,25 @@ static void mark_table_blocks(e2fsck_t ctx)
 
 		}
 		/*
+		 * Mark block used for the exclude bitmap
+		 */
+		if (EXT2_HAS_COMPAT_FEATURE(fs->super,
+			EXT2_FEATURE_COMPAT_EXCLUDE_BITMAP) &&
+		    ext2fs_exclude_bitmap_loc(fs, i)) {
+			if (ext2fs_test_block_bitmap2(ctx->block_found_map,
+				     ext2fs_exclude_bitmap_loc(fs, i))) {
+				pctx.blk = ext2fs_exclude_bitmap_loc(fs, i);
+				if (fix_problem(ctx, PR_1_EB_CONFLICT, &pctx)) {
+					ctx->invalid_exclude_bitmap_flag[i]++;
+					ctx->invalid_bitmaps++;
+				}
+			} else {
+			    ext2fs_mark_block_bitmap2(ctx->block_found_map,
+				     ext2fs_exclude_bitmap_loc(fs, i));
+		    }
+
+		}
+		/*
 		 * Mark block used for the inode bitmap
 		 */
 		if (ext2fs_inode_bitmap_loc(fs, i)) {
diff --git a/e2fsck/pass1b.c b/e2fsck/pass1b.c
index 155fcba..f77a9db 100644
--- a/e2fsck/pass1b.c
+++ b/e2fsck/pass1b.c
@@ -848,6 +848,11 @@ static int check_if_fs_block(e2fsck_t ctx, blk64_t test_block)
 		    (test_block == ext2fs_inode_bitmap_loc(fs, i)))
 			return 1;
 
+		if (EXT2_HAS_COMPAT_FEATURE(fs->super,
+			EXT2_FEATURE_COMPAT_EXCLUDE_BITMAP) &&
+		    test_block == ext2fs_exclude_bitmap_loc(fs, i))
+			return 1;
+
 		first_block += fs->super->s_blocks_per_group;
 	}
 	return 0;
diff --git a/e2fsck/pass5.c b/e2fsck/pass5.c
index e643091..9c5e880 100644
--- a/e2fsck/pass5.c
+++ b/e2fsck/pass5.c
@@ -251,6 +251,9 @@ redo_counts:
 			     (i < old_desc_blk + old_desc_blocks)) ||
 			    (new_desc_blk && (i == new_desc_blk)) ||
 			    (i == ext2fs_block_bitmap_loc(fs, group)) ||
+			    (EXT2_HAS_COMPAT_FEATURE(fs->super,
+				EXT2_FEATURE_COMPAT_EXCLUDE_BITMAP) &&
+			    (i == ext2fs_exclude_bitmap_loc(fs, group))) ||
 			    (i == ext2fs_inode_bitmap_loc(fs, group)) ||
 			    (i >= ext2fs_inode_table_loc(fs, group) &&
 			     (i < ext2fs_inode_table_loc(fs, group) +
diff --git a/e2fsck/problem.h b/e2fsck/problem.h
index ac058e3..f8e67b0 100644
--- a/e2fsck/problem.h
+++ b/e2fsck/problem.h
@@ -234,6 +234,8 @@ struct problem_context {
 /* Corrupted snapshot */
 #define PR_0_FIX_SNAPSHOT			0x000103
 
+/* Exclude bitmap not in group */
+#define PR_0_EB_NOT_GROUP			0x000104
 
 /*
  * Pass 1 errors
@@ -527,6 +529,10 @@ struct problem_context {
 /* EOFBLOCKS flag set when not necessary */
 #define PR_1_EOFBLOCKS_FL_SET		0x010060
 
+/* Block bitmap conflicts with some other fs block */
+#define PR_1_EB_CONFLICT		0x010101
+
+
 /*
  * Pass 1b errors
  */
diff --git a/e2fsck/super.c b/e2fsck/super.c
index b5f0b4e..092b554 100644
--- a/e2fsck/super.c
+++ b/e2fsck/super.c
@@ -831,6 +831,20 @@ void check_super_block(e2fsck_t ctx)
 			ctx->invalid_block_bitmap_flag[i]++;
 			ctx->invalid_bitmaps++;
 		}
+		if (EXT2_HAS_COMPAT_FEATURE(fs->super,
+			EXT2_FEATURE_COMPAT_EXCLUDE_BITMAP) &&
+		    ((ext2fs_exclude_bitmap_loc(fs, i) < first_block) ||
+		    (ext2fs_exclude_bitmap_loc(fs, i) > last_block))) {
+			pctx.blk = ext2fs_exclude_bitmap_loc(fs, i);
+			if (fix_problem(ctx, PR_0_EB_NOT_GROUP, &pctx))
+				ext2fs_exclude_bitmap_loc_set(fs, i, 0);
+		}
+		if (EXT2_HAS_COMPAT_FEATURE(fs->super,
+			EXT2_FEATURE_COMPAT_EXCLUDE_BITMAP) &&
+		    ext2fs_exclude_bitmap_loc(fs, i) == 0) {
+			ctx->invalid_exclude_bitmap_flag[i]++;
+			ctx->invalid_bitmaps++;
+		}
 		if ((ext2fs_inode_bitmap_loc(fs, i) < first_block) ||
 		    (ext2fs_inode_bitmap_loc(fs, i) > last_block)) {
 			pctx.blk = ext2fs_inode_bitmap_loc(fs, i);
@@ -864,6 +878,8 @@ void check_super_block(e2fsck_t ctx)
 		if (!ext2fs_group_desc_csum_verify(fs, i)) {
 			if (fix_problem(ctx, PR_0_GDT_CSUM, &pctx)) {
 				ext2fs_bg_flags_clear(fs, i, EXT2_BG_BLOCK_UNINIT);
+				ext2fs_bg_flags_clear(fs, i,
+						      EXT2_BG_EXCLUDE_UNINIT);
 				ext2fs_bg_flags_clear(fs, i, EXT2_BG_INODE_UNINIT);
 				ext2fs_bg_itable_unused_set(fs, i, 0);
 				should_be = 1;
@@ -873,10 +889,12 @@ void check_super_block(e2fsck_t ctx)
 
 		if (!csum_flag &&
 		    (ext2fs_bg_flags_test(fs, i, EXT2_BG_BLOCK_UNINIT) ||
+		     ext2fs_bg_flags_test(fs, i, EXT2_BG_EXCLUDE_UNINIT) ||
 		     ext2fs_bg_flags_test(fs, i, EXT2_BG_INODE_UNINIT) ||
 		     ext2fs_bg_itable_unused(fs, i) != 0)) {
 			if (fix_problem(ctx, PR_0_GDT_UNINIT, &pctx)) {
 				ext2fs_bg_flags_clear(fs, i, EXT2_BG_BLOCK_UNINIT);
+				ext2fs_bg_flags_clear(fs, i, EXT2_BG_EXCLUDE_UNINIT);
 				ext2fs_bg_flags_clear(fs, i, EXT2_BG_INODE_UNINIT);
 				ext2fs_bg_itable_unused_set(fs, i, 0);
 				should_be = 1;
diff --git a/e2fsck/util.c b/e2fsck/util.c
index fb9a87a..7801d0b 100644
--- a/e2fsck/util.c
+++ b/e2fsck/util.c
@@ -223,7 +223,8 @@ void e2fsck_read_bitmaps(e2fsck_t ctx)
 		fatal_error(ctx, 0);
 	}
 
-	old_op = ehandler_operation(_("reading inode and block bitmaps"));
+	old_op = ehandler_operation(_("reading inode, exclude and block "
+				      "bitmaps"));
 	retval = ext2fs_read_bitmaps(fs);
 	ehandler_operation(old_op);
 	if (retval) {
@@ -240,12 +241,14 @@ void e2fsck_write_bitmaps(e2fsck_t ctx)
 	errcode_t	retval;
 	const char	*old_op;
 
-	old_op = ehandler_operation(_("writing block and inode bitmaps"));
+	old_op = ehandler_operation(_("writing block, exclude "
+				      "and inode bitmaps"));
 	retval = ext2fs_write_bitmaps(fs);
 	ehandler_operation(old_op);
 	if (retval) {
 		com_err(ctx->program_name, retval,
-			_("while rewriting block and inode bitmaps for %s"),
+			_("while rewriting block, exclude "
+			  "and inode bitmaps for %s"),
 			ctx->device_name);
 		fatal_error(ctx, 0);
 	}
diff --git a/lib/ext2fs/check_desc.c b/lib/ext2fs/check_desc.c
index 7929cd9..fa61c85 100644
--- a/lib/ext2fs/check_desc.c
+++ b/lib/ext2fs/check_desc.c
@@ -69,6 +69,20 @@ errcode_t ext2fs_check_desc(ext2_filsys fs)
 		ext2fs_mark_block_bitmap2(bmap, blk);
 
 		/*
+		 * Check to make sure the exclude bitmap for group is sane
+		 */
+		if (EXT2_HAS_COMPAT_FEATURE(fs->super,
+					EXT2_FEATURE_COMPAT_EXCLUDE_BITMAP)) {
+			blk = ext2fs_exclude_bitmap_loc(fs, i);
+			if (blk < first_block || blk > last_block ||
+			    ext2fs_test_block_bitmap2(bmap, blk)) {
+				retval = EXT2_ET_GDESC_BAD_BLOCK_MAP;
+				goto errout;
+			}
+			ext2fs_mark_block_bitmap2(bmap, blk);
+		}
+
+		/*
 		 * Check to make sure the inode bitmap for group is sane
 		 */
 		blk = ext2fs_inode_bitmap_loc(fs, i);
diff --git a/lib/ext2fs/csum.c b/lib/ext2fs/csum.c
index 58e2971..4072f2d 100644
--- a/lib/ext2fs/csum.c
+++ b/lib/ext2fs/csum.c
@@ -228,8 +228,9 @@ int main(int argc, char **argv)
 
 	for (i=0; i < fs->group_desc_count; i++) {
 		ext2fs_block_bitmap_loc_set(fs, i, 124);
-		ext2fs_inode_bitmap_loc_set(fs, i, 125);
-		ext2fs_inode_table_loc_set(fs, i, 126);
+		ext2fs_exclude_bitmap_loc_set(fs, i, 125);
+		ext2fs_inode_bitmap_loc_set(fs, i, 126);
+		ext2fs_inode_table_loc_set(fs, i, 127);
 		ext2fs_bg_free_blocks_count_set(fs, i, 31119);
 		ext2fs_bg_free_inodes_count_set(fs, i, 15701);
 		ext2fs_bg_used_dirs_count_set(fs, i, 2);
