e2fsprogs: add exclude bitmap support in ext2ed

From: Yongqiang Yang <xiaoqiangnk@gmail.com>

Exclude bitmap is a feature needed by ext4 snapshot.  This patch
adds exclude bitmap support in ext2ed.

Signed-off-by: Yongqiang Yang <xiaoqiangnk@gmail.com>
diff --git a/ext2ed/excludebitmap_com.c b/ext2ed/excludebitmap_com.c
new file mode 100644
index 0000000..5bd6a6c
--- /dev/null
+++ b/ext2ed/excludebitmap_com.c
@@ -0,0 +1,306 @@
+/*
+ * /usr/src/ext2ed/excludebitmap_com.c
+ *
+ * A part of the extended file system 2 disk editor.
+ *
+ * -------------------------
+ * Handles the exlcude bitmap.
+ * -------------------------
+ *
+ * This file implements the commands which are specific
+ * to the excludebitmap type.
+ *
+ * Based on blockbitmap_com.c
+ *
+ * Copyright (C) 2011 Yongqiang Yang <xiaoqiangnk@gmail.com>
+ *  From ext2ed/blockbitmap_com.c
+ *  /usr/src/ext2ed/blockbitmap_com.c
+ *
+ *  A part of the extended file system 2 disk editor.
+ *
+ *  -------------------------
+ *  Handles the block bitmap.
+ *  -------------------------
+ *
+ *  This file implements the commands which are specific to the blockbitmap type.
+ *
+ *  First written on: July 5 1995
+ *
+ *  Copyright (C) 1995 Gadi Oxman
+ *
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "ext2ed.h"
+
+/*
+ * The functions in this file use the flobal structure exclude_bitmap_info.
+ * This structure contains the current position in the bitmap.
+ */
+
+/*
+ * This function changes the current entry in the bitmap. It just changes
+ * the entry_num variable in exclude_bitmap_info and dispatches a show command
+ * to show the new entry.
+ */
+void type_ext2_exclude_bitmap___entry(char *command_line)
+
+{
+	unsigned long entry_num;
+	char *ptr, buffer[80];
+
+	/* Get the requested entry */
+	ptr = parse_word(command_line, buffer);
+
+	if (*ptr == 0) {
+		wprintw(command_win,"Error - No argument specified\n");
+		refresh_command_win();
+		return;
+	}
+	ptr = parse_word(ptr, buffer);
+
+	entry_num = atol(buffer);
+
+	/* Check if it is a valid entry number */
+	if (entry_num >= file_system_info.super_block.s_blocks_per_group) {
+		wprintw(command_win,"Error - Entry number out of bounds\n");
+		refresh_command_win();
+		return;
+	}
+
+	/* If it is, just change entry_num and */
+	exclude_bitmap_info.entry_num = entry_num;
+	/* dispatch a show command */
+	strcpy(buffer,"show");
+	dispatch(buffer);
+}
+
+/*
+ * This function passes to the next entry in the bitmap.
+ * We just call the above entry command.
+ */
+void type_ext2_excldue_bitmap___next(char *command_line)
+{
+	long entry_offset = 1;
+	char *ptr, buffer[80];
+
+	ptr = parse_word(command_line, buffer);
+	if (*ptr != 0) {
+		ptr = parse_word(ptr, buffer);
+		entry_offset = atol(buffer);
+	}
+
+	sprintf(buffer, "entry %ld",
+		exclude_bitmap_info.entry_num + entry_offset);
+	dispatch(buffer);
+}
+
+void type_ext2_exclude_bitmap___prev (char *command_line)
+{
+	long entry_offset = 1;
+	char *ptr, buffer[80];
+
+	ptr = parse_word(command_line, buffer);
+	if (*ptr != 0) {
+		ptr = parse_word(ptr, buffer);
+		entry_offset = atol(buffer);
+	}
+
+	sprintf(buffer, "entry %ld",
+		exclude_bitmap_info.entry_num - entry_offset);
+	dispatch(buffer);
+}
+
+/*
+ * This function starts excluding block from the current position.
+ * Excluding involves setting the correct bits in the bitmap.
+ * This function is a vector version of exclude_block below -
+ * We just run on the blocks that we need to exclude, and call
+ * exclude_block for each one.
+ */
+void type_ext2_exclude_bitmap___exclude(char *command_line)
+{
+	long entry_num, num = 1;
+	char *ptr, buffer[80];
+
+	/* Get the number of blocks to exclude */
+	ptr = parse_word(command_line, buffer);
+	if (*ptr != 0) {
+		ptr = parse_word(ptr, buffer);
+		num = atol(buffer);
+	}
+
+	entry_num = exclude_bitmap_info.entry_num;
+
+	/* Check for limits */
+	if (num > file_system_info.super_block.s_blocks_per_group - entry_num) {
+		wprintw(command_win,"Error - There aren't that much blocks "
+			"in the group\n");
+		refresh_command_win();
+		return;
+	}
+
+	while (num) {
+		/* call exclude_block for each block */
+		allocate_block(entry_num);
+		num--;
+		entry_num++;
+	}
+
+	/* Show the result */
+	dispatch("show");
+}
+
+/*
+ * This is the opposite of the above function - We call deexclude_block.
+ */
+void type_ext2_exclude_bitmap___deallocate (char *command_line)
+{
+	long entry_num, num = 1;
+	char *ptr, buffer[80];
+
+	ptr = parse_word(command_line, buffer);
+	if (*ptr != 0) {
+		ptr = parse_word(ptr, buffer);
+		num = atol(buffer);
+	}
+
+	entry_num = exclude_bitmap_info.entry_num;
+	if (num > file_system_info.super_block.s_blocks_per_group-entry_num) {
+		wprintw(command_win,"Error - There aren't that much blocks "
+			"in the group\n");
+		refresh_command_win();
+		return;
+	}
+
+	while (num) {
+		deexclude_block(entry_num);
+		num--;
+		entry_num++;
+	}
+
+	dispatch("show");
+}
+
+
+/* In this function we convert the bit number into the right byte 
+ * and inner bit positions.
+ */
+void exclude_block(long entry_num)
+{
+	unsigned char bit_mask=1;
+	int byte_offset, j;
+
+	/* Find the correct byte - entry_num / 8 */
+	byte_offset = entry_num / 8;
+
+	/* The position inside the byte is entry_num % 8 */
+	j = entry % 8;
+
+	/* Generate the OR mask - 1 at the right place */
+	bit_mask <<= j; 
+
+	/* And apply it */
+	type_data.u.buffer[byte_offset] |= bit_mask;
+}
+
+/* This is the opposite of exclude_block above.
+ * We use an AND mask instead of an or mask.
+ */
+void deexclude_block(long entry_num)
+{
+	unsigned char bit_mask = 1;
+	int byte_offset, j;
+
+	byte_offset = entry_num / 8;
+
+	j = entry_num % 8;
+	bitmak <<= j;
+	bit_mask ^= 0xff;
+
+	type_data.u.buffer[byte_offset] &= bit_mask;
+}
+
+/*
+ * We show the bitmap as a series of bits, grouped at 8-bit intervals.
+ * We display 8 such groups on each line.
+ * The current position (as known from exclude_bitmap_info.entry_num)
+ * is highlighted.
+ */
+void type_ext2_exclude_bitmap___show (char *command_line)
+{
+	int i, j;
+	unsigned char *ptr;
+	unsigned long block_num, entry_num;
+
+	ptr = type_data.u.buffer;
+	show_pad_info.line = 0;
+	show_pad_info.max_line = -1;
+
+	wmove(show_pad, 0, 0);
+	for (i = 0, entry_num = 0;
+	     i < file_system_info.super_block.s_blocks_per_group / 8;
+	     i++, ptr++) {
+
+		/* j contains the AND bit mask */
+		for (j = 1; j <= 128; j *= 2) {
+			if (entry_num == exlcude_bitmap_info.entry_num) {
+				/* Highlight the current entry */
+				wattrset(show_pad,A_REVERSE);
+				show_pad_info.line = show_pad_info.max_line -
+					show_pad_info.display_lines / 2;
+			}
+
+			/* Apply the mask */
+			if ((*ptr) & j)
+				wprintw (show_pad, "1");
+			else
+				wprintw (show_pad, "0");
+
+			if (entry_num == exclude_bitmap_info.entry_num)
+				wattrset(show_pad, A_NORMAL);
+
+			/* Pass to the next entry */
+			entry_num++;
+		}
+		wprintw (show_pad, " ");
+		if (i % 8 == 7) {
+			/* Display 8 groups in a row */
+			wprintw(show_pad, "\n");
+			show_pad_info.max_line++;
+		}
+	}
+
+	refresh_show_pad();
+
+	/* Show the usual information */
+	show_info();
+
+	/* Show the group number */
+	wmove(show_win, 1, 0);
+	wprintw(show_win, "Exclude bitmap of block group %ld\n",
+		exclude_bitmap_info.group_num);
+
+	/* Show the block number */
+	block_num = exclude_bitmap_info.entry_num +
+		    exclude_bitmap_info.group_num *
+		    file_system_info.super_block.s_blocks_per_group;
+
+	block_num += file_system_info.super_block.s_first_data_block;
+
+	/* and the exclude status */
+	wprintw(show_win, "Status of block %ld - ", block_num);
+	ptr = type_data.u.buffer + exclude_bitmap_info.entry_num / 8;
+
+	j=1;
+	j <<= exclude_bitmap_info.entry_num % 8;
+
+	if ((*ptr) & j)
+		wprintw(show_win, "Excluded\n");
+	else
+		wprintw(show_win, "Non-Excluded\n");
+	refresh_show_win();
+}
diff --git a/ext2ed/ext2ed.h b/ext2ed/ext2ed.h
index 2ee483e..f17e9fc 100644
--- a/ext2ed/ext2ed.h
+++ b/ext2ed/ext2ed.h
@@ -163,6 +163,11 @@ struct struct_block_bitmap_info {			/* Used in blockbitmap_com.c */
 	unsigned long group_num;
 };
 
+struct struct_exclude_bitmap_info {			/* Used in excludebitmap_com.c */
+	unsigned long entry_num;
+	unsigned long group_num;
+};
+
 struct struct_inode_bitmap_info {			/* Used in inodebitmap_com.c */
 	unsigned long entry_num;
 	unsigned long group_num;
@@ -398,6 +403,7 @@ extern void type_ext2_group_desc___show (char *command_line);
 extern void type_ext2_group_desc___inode (char *command_line);
 extern void type_ext2_group_desc___gocopy (char *command_line);
 extern void type_ext2_group_desc___blockbitmap (char *command_line);
+extern void type_ext2_group_desc___excludebitmap (char *command_line);
 extern void type_ext2_group_desc___inodebitmap (char *command_line);
 extern void type_ext2_group_desc___setactivecopy (char *command_line);
 
@@ -412,6 +418,17 @@ extern void type_ext2_block_bitmap___deallocate (char *command_line);
 void allocate_block (long entry_num);
 void deallocate_block (long entry_num);
 
+/* exlcudebitmap_com.c */
+
+extern void type_ext2_exclude_bitmap___show (char *command_line);
+extern void type_ext2_exclude_bitmap___entry (char *command_line);
+extern void type_ext2_exclude_bitmap___next (char *command_line);
+extern void type_ext2_exclude_bitmap___prev (char *command_line);
+extern void type_ext2_exclude_bitmap___allocate (char *command_line);
+extern void type_ext2_exclude_bitmap___deallocate (char *command_line);
+void exclude_block (long entry_num);
+void deexclude_block (long entry_num);
+
 /* inodebitmap_bom.c */
 
 extern void type_ext2_inode_bitmap___show (char *command_line);
diff --git a/ext2ed/group_com.c b/ext2ed/group_com.c
index 2532553..1f9a949 100644
--- a/ext2ed/group_com.c
+++ b/ext2ed/group_com.c
@@ -156,6 +156,20 @@ void type_ext2_group_desc___blockbitmap (char *command_line)
 	sprintf (buffer,"settype block_bitmap");dispatch (buffer);
 }
 
+void type_ext2_group_desc___excludebitmap (char *command_line)
+
+{
+	long exclude_bitmap_offset;
+	char buffer [80];
+
+	exclude_bitmap_info.entry_num=0;
+	exclude_bitmap_info.group_num=group_info.group_num;
+
+	exclude_bitmap_offset=type_data.u.t_ext2_group_desc.bg_exclude_bitmap;
+	sprintf (buffer,"setoffset block %ld",exclude_bitmap_offset);dispatch (buffer);
+	sprintf (buffer,"settype exclude_bitmap");dispatch (buffer);
+}
+
 void type_ext2_group_desc___inodebitmap (char *command_line)
 
 {
diff --git a/ext2ed/init.c b/ext2ed/init.c
index 3815ab5..a7272b1 100644
--- a/ext2ed/init.c
+++ b/ext2ed/init.c
@@ -322,6 +322,7 @@ Set specific type user commands.
 		add_user_command (&ptr->type_commands,"inode","Pass to the inode table of the current group block",type_ext2_group_desc___inode);
 		add_user_command (&ptr->type_commands,"gocopy","Move to another backup copy of the group descriptor",type_ext2_group_desc___gocopy);
 		add_user_command (&ptr->type_commands,"blockbitmap","Show the block allocation bitmap of the current group block",type_ext2_group_desc___blockbitmap);
+		add_user_command (&ptr->type_commands,"excludebitmap","Show the snapshot exclude bitmap of the current group block",type_ext2_group_desc__excludebitmap);
 		add_user_command (&ptr->type_commands,"inodebitmap","Show the inode allocation bitmap of the current group block",type_ext2_group_desc___inodebitmap);
 		add_user_command (&ptr->type_commands,"setactivecopy","Copies the current group descriptor to the main table",type_ext2_super_block___setactivecopy);
 	}
@@ -335,6 +336,15 @@ Set specific type user commands.
 		add_user_command (&ptr->type_commands,"deallocate","Deallocates the current block",type_ext2_block_bitmap___deallocate);
 	}
 
+		if (strcmp ((ptr->name),"exlcude_bitmap")==0) {
+		add_user_command (&ptr->type_commands,"show","Displays the snapshot exclude bitmap",type_ext2_exclude_bitmap___show);
+		add_user_command (&ptr->type_commands,"entry","Moves to a specific bit",type_ext2_exclude_bitmap___entry);
+		add_user_command (&ptr->type_commands,"next","Moves to the next bit",type_ext2_exclude_bitmap___next);
+		add_user_command (&ptr->type_commands,"prev","Moves to the previous bit",type_ext2_exclude_bitmap___prev);
+		add_user_command (&ptr->type_commands,"exclude","Excludes the current block",type_ext2_exclude_bitmap___exclude);
+		add_user_command (&ptr->type_commands,"deexclude","Deexcludes the current block",type_ext2_exclude_bitmap___deexclude);
+	}
+
 	if (strcmp ((ptr->name),"inode_bitmap")==0) {
 		add_user_command (&ptr->type_commands,"show","Displays the inode allocation bitmap",type_ext2_inode_bitmap___show);
 		add_user_command (&ptr->type_commands,"entry","Moves to a specific bit",type_ext2_inode_bitmap___entry);
diff --git a/ext2ed/main.c b/ext2ed/main.c
index 50a3f07..6bb4e0b 100644
--- a/ext2ed/main.c
+++ b/ext2ed/main.c
@@ -83,6 +83,7 @@ struct struct_group_info group_info;				/* Used by group_com.c */
 struct struct_super_info super_info;				/* Used by super_com.c */
 struct struct_remember_lifo remember_lifo;			/* A circular memory of objects */
 struct struct_block_bitmap_info block_bitmap_info;		/* Used by blockbitmap_com.c */
+struct struct_exlcude_bitmap_info exclude_bitmap_info;		/* Used by excludebitmap_com.c */
 struct struct_inode_bitmap_info inode_bitmap_info;		/* Used by inodebitmap_com.c */
 
 int redraw_request=0;						/* Is set by a signal handler to handle terminal */
